{
  "videoSteps": [
    {
      "src": "speaker.webm",
      "start": 0,
      "end": 25,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 25,
      "end": 39,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 39,
      "end": 53,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 53,
      "end": 71,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 71,
      "end": 95.5,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 95.5,
      "end": 128.2,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 128.2,
      "end": 169.7,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 169.7,
      "end": 214,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 214,
      "end": 257.8,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 257.8,
      "end": 292.5,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 292.5,
      "end": 309,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 309,
      "end": 320,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 323,
      "end": 335,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 335,
      "end": 367,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 367,
      "end": 377,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 377,
      "end": 406.9,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 406.9,
      "end": 420,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 420,
      "end": 439.6,
      "mdxType": "Video"
    },
    {
      "src": "speaker.webm",
      "start": 439.6,
      "end": 484.1,
      "mdxType": "Video"
    }
  ],
  "browserSteps": [
    {
      "url": "/hello",
      "loadUrl": "/01",
      "zoom": 0.8,
      "mdxType": "Browser"
    },
    {
      "url": "/hello",
      "loadUrl": "/01",
      "zoom": 0.8,
      "mdxType": "Browser"
    },
    {
      "url": "/hello",
      "loadUrl": "/01",
      "zoom": 0.8,
      "mdxType": "Browser"
    },
    {
      "url": "/hello",
      "loadUrl": "/02",
      "zoom": 0.8,
      "mdxType": "Browser"
    },
    {
      "url": "/hello",
      "loadUrl": "/03",
      "zoom": 0.8,
      "mdxType": "Browser"
    },
    {
      "url": "/hello",
      "loadUrl": "/04",
      "zoom": 0.8,
      "mdxType": "Browser"
    },
    {
      "url": "/hello",
      "loadUrl": "/05",
      "zoom": 0.9,
      "mdxType": "Browser"
    },
    {
      "url": "/steps",
      "loadUrl": "/06",
      "zoom": 0.9,
      "mdxType": "Browser"
    },
    {
      "actions": [
        {
          "on": 230,
          "type": "click",
          "selector": "button",
          "offset": 40,
          "mdxType": "Action"
        },
        {
          "on": 232,
          "type": "click",
          "selector": "button",
          "offset": 40,
          "mdxType": "Action"
        },
        {
          "on": 234,
          "type": "click",
          "selector": "button",
          "offset": 40,
          "mdxType": "Action"
        }
      ],
      "url": "/steps",
      "loadUrl": "/07",
      "zoom": 0.9,
      "mdxType": "Browser"
    },
    {
      "actions": [
        {
          "on": 278,
          "type": "scroll",
          "selector": "#step-1",
          "mdxType": "Action"
        },
        {
          "on": 282,
          "type": "scroll",
          "selector": "#step-2",
          "mdxType": "Action"
        },
        {
          "on": 284,
          "type": "scroll",
          "selector": "#step-3",
          "mdxType": "Action"
        },
        {
          "on": 286,
          "type": "scroll",
          "selector": "#step-0",
          "mdxType": "Action"
        }
      ],
      "url": "/steps",
      "loadUrl": "/08",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "url": "/steps",
      "loadUrl": "/09",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "url": "/steps",
      "loadUrl": "/10",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "actions": [
        {
          "on": 326,
          "type": "scroll",
          "selector": "#step-1",
          "mdxType": "Action"
        },
        {
          "on": 328.5,
          "type": "scroll",
          "selector": "#step-2",
          "mdxType": "Action"
        },
        {
          "on": 331,
          "type": "scroll",
          "selector": "#step-3",
          "mdxType": "Action"
        },
        {
          "on": 333.5,
          "type": "scroll",
          "selector": "#step-0",
          "mdxType": "Action"
        }
      ],
      "url": "/steps",
      "loadUrl": "/10",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "actions": [
        {
          "on": 345,
          "type": "scroll",
          "selector": "#step-1",
          "mdxType": "Action"
        },
        {
          "on": 347,
          "type": "scroll",
          "selector": "#step-2",
          "mdxType": "Action"
        },
        {
          "on": 349,
          "type": "scroll",
          "selector": "#step-3",
          "mdxType": "Action"
        },
        {
          "on": 351,
          "type": "scroll",
          "selector": "#step-0",
          "mdxType": "Action"
        }
      ],
      "url": "/steps",
      "loadUrl": "/11",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "url": "/steps",
      "loadUrl": "/11",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "url": "/steps",
      "loadUrl": "/13",
      "zoom": 0.6,
      "mdxType": "Browser"
    },
    {
      "url": "/",
      "zoom": 0.4,
      "mdxType": "Browser"
    },
    {
      "url": "/",
      "zoom": 0.4,
      "mdxType": "Browser"
    },
    {
      "url": "https://codehike.org",
      "zoom": 0.4,
      "prependOrigin": false,
      "mdxType": "Browser"
    }
  ],
  "editorSteps": [
    {
      "code": "# One\n\nLorem ipsum dolor sit amet, consectetur adipiscing\nelit, sed do, eiusmod tempor incididunt ut labore et\ndolore magna **aliqua.**\n\n# Two\n\nUt enim _ad minim veniam_, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n# Three\n\nDuis aute irure dolor in reprehenderit in voluptate velit\nesse **cillum dolore** eu fugiat nulla pariatur.\n\n# Four\n\nExcepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt _mollit_ anim id est laborum.\n",
      "file": "demo/hello.md",
      "lang": "md",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport Content from \"../demo/hello.md\"\n\nexport default function Page() {\n  return <Content />\n}\n",
      "file": "pages/hello.js",
      "lang": "jsx",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport Content from \"../demo/hello.md\"\n\nexport default function Page() {\n  return <Content />\n}\n",
      "file": "pages/hello.js",
      "focus": "2,5[9:22]",
      "lang": "jsx",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/hello.md\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  h1: ({ children }) => (\n    <h1 style={{ border: \"12px solid purple\" }}>\n      {children}\n    </h1>\n  ),\n}\n",
      "file": "pages/hello.js",
      "lang": "jsx",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/hello.md\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  return (\n    <div style={{ border: \"12px solid purple\" }}>\n      {children}\n    </div>\n  )\n}\n",
      "file": "pages/hello.js",
      "focus": "13:23",
      "lang": "jsx",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/hello.md\"\nimport { ShowChildrenJSON } from \"../src/children-as-json\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  return <ShowChildrenJSON children={children} />\n}\n",
      "file": "pages/hello.js",
      "focus": "14:20",
      "lang": "jsx",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/hello.md\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  // Get the titles from all the H1s\n  const titles = React.Children.toArray(children)\n    .filter(child => child.props.mdxType === \"h1\")\n    .map(child => child.props.children)\n\n  return (\n    <main>\n      Table of contents:\n      <ul>\n        {titles.map(title => (\n          <li>{title}</li>\n        ))}\n      </ul>\n      <hr />\n      {children}\n    </main>\n  )\n}\n",
      "file": "pages/hello.js",
      "focus": "17:35",
      "lang": "jsx",
      "tabs": ["demo/hello.md", "pages/hello.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import { Step } from \"./step.js\"\n\n<Step>\n\n# One\n\nLorem ipsum dolor sit amet, consectetur adipiscing\nelit, sed do, eiusmod tempor incididunt ut labore et\ndolore magna **aliqua.**\n\n</Step>\n\n<Step>\n\n# Two\n\nUt enim _ad minim veniam_, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n</Step>\n\n<Step>\n\n# Three\n\nDuis aute irure dolor in reprehenderit in voluptate velit\nesse **cillum dolore** eu fugiat nulla pariatur.\n\n</Step>\n\n<Step>\n\n# Four\n\nExcepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt _mollit_ anim id est laborum.\n\n</Step>\n",
      "file": "demo/steps.mdx",
      "focus": "1:20",
      "lang": "md",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/steps.mdx\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  const [stepIndex, setIndex] = React.useState(0)\n  const steps = React.Children.toArray(children)\n  return (\n    <div>\n      {steps[stepIndex]}\n      <button onClick={() => setIndex(stepIndex + 1)}>\n        Next\n      </button>\n    </div>\n  )\n}\n",
      "file": "pages/steps.js",
      "focus": "17:28",
      "lang": "jsx",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/steps.mdx\"\nimport { ScrollytellingLayout } from \"../src/scrollytelling\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  const steps = React.Children.toArray(children)\n  const stickers = steps.map((_, stepIndex) => (\n    <>\n      <div>Step</div>\n      <span>{stepIndex}</span>\n    </>\n  ))\n  return (\n    <ScrollytellingLayout\n      steps={steps}\n      stickers={stickers}\n    />\n  )\n}\n",
      "file": "pages/steps.js",
      "focus": "18:32",
      "lang": "jsx",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import { Step } from \"./step.js\"\n\n<Step>\n\n```bash\n$ lorem ipsum\ndolor sit amet\nconsectetur adipiscing elit\n```\n\n# One\n\nLorem ipsum dolor sit amet, consectetur adipiscing\nelit, sed do, eiusmod tempor incididunt ut labore et\ndolore magna **aliqua.**\n\n</Step>\n\n<Step>\n\n```bash\n$ sed do\n```\n\n# Two\n\nUt enim _ad minim veniam_, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n</Step>\n\n<Step>\n\n```bash\n$ eiusmod tempor incididunt\nut labore et dolore\n```\n\n# Three\n\nDuis aute irure dolor in reprehenderit in voluptate velit\nesse **cillum dolore** eu fugiat nulla pariatur.\n\n</Step>\n\n<Step>\n\n```bash\n$ magna aliqua\nut enim ad minim veniam\nquis nostrud\nullamco laboris ut aliquip\nex ea commodo consequat\n$ duis aute irure dolor\nin reprehenderit\n```\n\n# Four\n\nExcepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt _mollit_ anim id est laborum.\n\n</Step>\n",
      "file": "demo/steps.mdx",
      "focus": "19:23,30:37,44",
      "lang": "md",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React, { Children } from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/steps.2.mdx\"\nimport { ScrollytellingLayout } from \"../src/scrollytelling\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  const steps = Children.toArray(children).map(child => {\n    return Children.toArray(child.props.children).slice(1)\n  })\n  const stickers = Children.map(children, child => {\n    return Children.toArray(child.props.children)[0]\n  })\n\n  return (\n    <ScrollytellingLayout\n      steps={steps}\n      stickers={stickers}\n    />\n  )\n}\n",
      "file": "pages/steps.js",
      "focus": "18:32",
      "lang": "jsx",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React, { Children } from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/steps.2.mdx\"\nimport { ScrollytellingLayout } from \"../src/scrollytelling\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  const steps = Children.toArray(children).map(child => {\n    return Children.toArray(child.props.children).slice(1)\n  })\n  const stickers = Children.map(children, child => {\n    return Children.toArray(child.props.children)[0]\n  })\n\n  return (\n    <ScrollytellingLayout\n      steps={steps}\n      stickers={stickers}\n    />\n  )\n}\n",
      "file": "pages/steps.js",
      "focus": "18:32",
      "lang": "jsx",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React, { Children } from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/steps.2.mdx\"\nimport { Terminal } from \"../src/mini-terminal\"\nimport { ScrollytellingLayout } from \"../src/scrollytelling\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  const steps = Children.toArray(children).map(child => {\n    return Children.toArray(child.props.children).slice(1)\n  })\n  const stickers = Children.map(children, child => {\n    return Children.toArray(child.props.children)[0]\n  })\n  const snippets = stickers.map(\n    element => element.props.children.props.children\n  )\n\n  return (\n    <ScrollytellingLayout\n      steps={steps}\n      sticker={stepIndex => (\n        <Terminal snippets={snippets} index={stepIndex} />\n      )}\n    />\n  )\n}\n",
      "file": "pages/steps.js",
      "focus": "19,26:38",
      "lang": "jsx",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import { Step } from \"./step.js\"\n\n<Step video=\"step-0.webm\" from={7} to={23.61}>\n\n```bash\n$ lorem ipsum\ndolor sit amet\nconsectetur adipiscing elit\n```\n\n# One\n\nLorem ipsum dolor sit amet, consectetur adipiscing\nelit, sed do, eiusmod tempor incididunt ut labore et\ndolore magna **aliqua.**\n\n</Step>\n\n<Step video=\"step-1.webm\" from={0} to={1.56}>\n\n```bash\n$ sed do\n```\n\n# Two\n\nUt enim _ad minim veniam_, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n</Step>\n\n<Step video=\"step-2.webm\" from={0} to={1}>\n\n```bash\n$ eiusmod tempor incididunt\nut labore et dolore\n```\n\n# Three\n\nDuis aute irure dolor in reprehenderit in voluptate velit\nesse **cillum dolore** eu fugiat nulla pariatur.\n\n</Step>\n\n<Step video=\"step-3.webm\" from={0} to={12}>\n\n```bash\n$ magna aliqua\nut enim ad minim veniam\nquis nostrud\nullamco laboris ut aliquip\nex ea commodo consequat\n$ duis aute irure dolor\nin reprehenderit\n```\n\n# Four\n\nExcepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt _mollit_ anim id est laborum.\n\n</Step>\n",
      "file": "demo/steps.mdx",
      "focus": "3,17,19,30",
      "lang": "md",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "import React, { Children } from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Content from \"../demo/steps.3.mdx\"\nimport { TalkLayout } from \"../src/talk-layout\"\n\nexport default function Page() {\n  return (\n    <MDXProvider components={components}>\n      <Content />\n    </MDXProvider>\n  )\n}\n\nconst components = {\n  wrapper: Wrapper,\n}\n\nfunction Wrapper({ children }) {\n  const steps = Children.toArray(children).map(child => {\n    return Children.toArray(child.props.children).slice(1)\n  })\n  const stickers = Children.map(children, child => {\n    return Children.toArray(child.props.children)[0]\n  })\n  const snippets = stickers.map(\n    element => element.props.children.props.children\n  )\n  const clips = Children.map(children, child => {\n    const { video, from, to } = child.props\n    return { src: video, start: from, end: to }\n  })\n\n  return (\n    <TalkLayout\n      steps={steps}\n      snippets={snippets}\n      clips={clips}\n    />\n  )\n}\n",
      "file": "pages/steps.js",
      "focus": "18,28:40",
      "lang": "jsx",
      "tabs": ["demo/steps.mdx", "pages/steps.js"],
      "mdxType": "Editor"
    },
    {
      "code": "<Video src=\"speaker.webm\" start={1} end={25} />\n<Browser url=\"/hello\" loadUrl=\"/01\" zoom={0.8} />\n<Editor\n  code=\"hello.md\"\n  lang=\"md\"\n  tab=\"demo/hello.md\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n0 –> 4\nHere we have a Markdown file\n4 –> 10\nMarkdown has this clean syntax that\nmakes you want to use it for everything\n10 –> 15.6\nAnd that's also why we have MDX,\nnow we can put more things on Markdown\n15.6 –> 19.7\nIn this talk,\nwe are going to see how flexible MDX is\n19.7 –> 25\nAnd how to use it for any kind of content\nand any kind of layout\n```\n\n---\n\n<Video src=\"speaker.webm\" start={25} end={39} />\n<Browser url=\"/hello\" loadUrl=\"/01\" zoom={0.8} />\n<Editor\n  code=\"01.js\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n25 –> 29.5\nBut first I need to show you how this works\n29.5 –> 34.8\nWe have a small Next.js App\nthat has the MDX plugin\n34.8 –> 39\nand we have a page that imports\nthe markdown file\n```\n\n---\n\n<Video src=\"speaker.webm\" start={39} end={53} />\n<Browser url=\"/hello\" loadUrl=\"/01\" zoom={0.8} />\n<Editor\n  code=\"01.js\"\n  focus=\"2,5[9:22]\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n39 -> 43.7\nThe real magic happens on this import\n43.7 -> 49.5\nHere the MDX loader transforms the markdown\ninto a React component\n49.5 -> 53\nAnd the page just renders that component\n```\n\n---\n\n<Video src=\"speaker.webm\" start={53} end={71} />\n<Browser url=\"/hello\" loadUrl=\"/02\" zoom={0.8} />\n<Editor\n  code=\"02.js\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n53 -> 59\nIf we want to change what's rendered,\nwe can use the MDXProvider\n59 -> 64.3\nIt has a prop that let us override\nany of the default components\n64.3 -> 71\nFor example, here we are adding\na purple border to all H1s\n```\n\n---\n\n<Video src=\"speaker.webm\" start={71} end={95.5} />\n<Browser url=\"/hello\" loadUrl=\"/03\" zoom={0.8} />\n<Editor\n  code=\"03.js\"\n  focus=\"13:23\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n71 -> 75.1\nA special component we can override\nis the Wrapper\n75.1 -> 79.5\nThe wrapper is the component\nthat wraps the content\n79.5 -> 85.6\nYou can see how we're using it to add\na border around the whole content\n85.6 -> 90\nBut the cool thing about this component\nis that in the children prop\n90 -> 95.5\nwe get all the content from\nthe markdown file as React elements\n```\n\n---\n\n<Video src=\"speaker.webm\" start={95.5} end={128.2} />\n<Browser url=\"/hello\" loadUrl=\"/04\" zoom={0.8} />\n<Editor\n  code=\"04.js\"\n  focus=\"14:20\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n95.5 -> 100.5\nand React elements\nare just javascript objects\n100.5 -> 103.9\nHere we are rendering\nthe wrapper children as JSON\n103.9 -> 106.8\nWe are only showing some of the properties\n106.8 -> 110.8\nI hope you can see\nwhat the JSON looks like\n110.8 -> 112.3\nIt's an array\n112.3 -> 117.9\nthe first element is an h1,\nthe second a paragraph\n117.9 -> 122\nEach element comes with an mdxType\n122 -> 128.2\nWe can, and we will, use that mdxType to\nextract information about the content\n```\n\n---\n\n<Video src=\"speaker.webm\" start={128.2} end={169.7} />\n<Browser url=\"/hello\" loadUrl=\"/05\" zoom={0.9} />\n<Editor\n  code=\"05.js\"\n  focus=\"17:35\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n128.2 -> 129.3\nFor example\n129.3 -> 133.3\nwe could get a list of all the H1s\nfrom the children,\n133.3 -> 138.4\nand render it as a table of contents\nThis is a very simple example,\n138.4 -> 144.2\nbut it shows the pattern we are going\nto use on the rest of the examples\n144.2 -> 147.1\nIn all of them, we'll have two steps\n147.1 -> 151\nFirst, we extract some data\nfrom the children\n151 -> 156.4\nand then we pass that data\nto some layout component\n156.4 -> 160.4\nKeep in mind that this runs on every render\n160.4 -> 163\nIn most cases,\nit isn't a performance problem\n163 -> 169.7\nbut if it is, you can move it to a plugin,\nand run the transformation on build-time\n```\n\n---\n\n<Video src=\"speaker.webm\" start={169.7} end={214} />\n<Browser url=\"/steps\" loadUrl=\"/06\" zoom={0.9} />\n<Editor\n  code=\"steps.mdx\"\n  focus=\"1:20\"\n  lang=\"md\"\n  tab=\"demo/steps.mdx\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n169.7 -> 177.4\nI usually write content that has steps\nlike tutorials or any type of walkthrough\n177.4 -> 182.4\nMarkdown doesn't have any specific syntax\nfor grouping things in steps\n182.4 -> 188.6\nBut we can use MDX to extend Markdown\nand make up our syntax\n188.6 -> 192.9\nThe implementation of the Step component\nwe are using here doesn't matter\n192.9 -> 196\nwe are just using it for grouping elements\n196 -> 201.3\nIf you are new to MDX,\nthis may not be the best introduction\n201.3 -> 206.7\nMDX is typically used for embedding\ninteractive components in Markdown\n206.7 -> 209.1\nBut here we are taking a different approach\n209.1 -> 214\nand using it more\nas a syntax extension for markdown\n```\n\n---\n\n<Video src=\"speaker.webm\" start={214} end={257.8} />\n<Browser url=\"/steps\" loadUrl=\"/07\" zoom={0.9}>\n  <Action\n    on={230}\n    type=\"click\"\n    selector=\"button\"\n    offset={40}\n  />\n  <Action\n    on={232}\n    type=\"click\"\n    selector=\"button\"\n    offset={40}\n  />\n  <Action\n    on={234}\n    type=\"click\"\n    selector=\"button\"\n    offset={40}\n  />\n</Browser>\n<Editor\n  code=\"07.js\"\n  focus=\"17:28\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n214 -> 219.5\nNow, based on the MDX file that has steps,\nwe can write another Wrapper component\n219.5 -> 224.2\nIn this case, the children prop will be\nan array of Step elements\n224.2 -> 229\nSo we can keep track of\nwhat step we are showing using React state\n229 -> 235\nand let the user change the current step\nby clicking a button\n235 -> 241.5\nOk, now I want to show the same content\nbut with a different layout\n241.5 -> 248.5\nThere's a technique called scrollytelling,\nyou may have seen it on some websites\n248.5 -> 253.5\nas the user scrolls down there's some\npart of the layout that sticks to the screen\n253.5 -> 256.4\nwhile the rest is scrolled away\n256.4 -> 257.8\nLet's do that\n```\n\n---\n\n<Video src=\"speaker.webm\" start={257.8} end={292.5} />\n<Browser url=\"/steps\" loadUrl=\"/08\" zoom={0.6}>\n  <Action on={278} type=\"scroll\" selector=\"#step-1\" />\n  <Action on={282} type=\"scroll\" selector=\"#step-2\" />\n  <Action on={284} type=\"scroll\" selector=\"#step-3\" />\n  <Action on={286} type=\"scroll\" selector=\"#step-0\" />\n</Browser>\n<Editor\n  code=\"08.js\"\n  focus=\"18:32\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n257.8 -> 262.5\nSince this is a lightning talk\nI won't show the code of the Layout component\n262.5 -> 267.5\nI'll share the link to the repo later\nif you want to see how it works\n267.5 -> 272\nThe ScrollytellingLayout component\ntakes two props\n272 -> 278.7\none for the left-side that can be scrolled,\nand another for the sticky part on the right\n278.7 -> 281\nWhen the user scrolls to a new step\n281 -> 284.6\nwe show the corresponding element\nfrom the sticker list\n284.6 -> 286.7\nwhich, for now, it's just the step number\n286.7 -> 292.5\nBut let's change it so it shows something\nfrom the MDX file\n```\n\n---\n\n<Video src=\"speaker.webm\" start={292.5} end={309} />\n<Browser url=\"/steps\" loadUrl=\"/09\" zoom={0.6} />\n<Editor\n  code=\"steps.2.mdx\"\n  focus=\"3:9,17:23,30\"\n  focus=\"19:23,30:37,44\"\n  lang=\"md\"\n  tab=\"demo/steps.mdx\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n292.5 -> 297\nSuppose we want to show some code\nin the sticky part of the layout\n297 -> 302.5\nSince there isn't any specific syntax\nfor this, we'll make up our own\n302.5 -> 309\nFor example, we put the sticky part\nas the first element in the Step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={309} end={320} />\n<Browser url=\"/steps\" loadUrl=\"/10\" zoom={0.6}></Browser>\n<Editor\n  code=\"10.js\"\n  focus=\"18:32\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n309 -> 311.5\nNow, doing some array transformations\n311.5 -> 315.7\nWe extract the list of steps\nand the list of stickers\n315.7 -> 320\nand then pass them\nto the same Layout component\n```\n\n---\n\n<Video src=\"speaker.webm\" start={323} end={335} />\n<Browser url=\"/steps\" loadUrl=\"/10\" zoom={0.6}>\n  <Action on={326} type=\"scroll\" selector=\"#step-1\" />\n  <Action on={328.5} type=\"scroll\" selector=\"#step-2\" />\n  <Action on={331} type=\"scroll\" selector=\"#step-3\" />\n  <Action on={333.5} type=\"scroll\" selector=\"#step-0\" />\n</Browser>\n<Editor\n  code=\"10.js\"\n  focus=\"18:32\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n323 -> 325\nSo now the code on the right\n325 -> 335\nshould change as the user scrolls\nto a different step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={335} end={367} />\n<Browser url=\"/steps\" loadUrl=\"/11\" zoom={0.6}>\n  <Action on={345} type=\"scroll\" selector=\"#step-1\" />\n  <Action on={347} type=\"scroll\" selector=\"#step-2\" />\n  <Action on={349} type=\"scroll\" selector=\"#step-3\" />\n  <Action on={351} type=\"scroll\" selector=\"#step-0\" />\n</Browser>\n<Editor\n  code=\"11.js\"\n  focus=\"19,26:38\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n335 -> 342\nJust for fun, I have a Terminal component\nthat animates code transitions\n342 -> 347\nso we can use it for the stickers\nand let it handle the step changes\n350.8 -> 355\nFor the next example, let's add some media\n355 -> 358.4\nInstead of changing the steps\nusing the scroll\n358.4 -> 363.2\nwe can synchronize the steps with something\nlike a video or an audio,\n363.2 -> 367\nand change the steps as the media progress\n```\n\n---\n\n<Video src=\"speaker.webm\" start={367} end={377} />\n<Browser url=\"/steps\" loadUrl=\"/11\" zoom={0.6} />\n<Editor\n  code=\"steps.3.mdx\"\n  focus=\"3,17,19,30\"\n  lang=\"md\"\n  tab=\"demo/steps.mdx\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n367 -> 370.5\nTo do that,\nwe'll change the MDX\n370.5 -> 377\nwe need to specify the media file\nand the time range for each step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={377} end={406.9} />\n<Browser url=\"/steps\" loadUrl=\"/13\" zoom={0.6} />\n<Editor\n  code=\"13.js\"\n  focus=\"18,28:40\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n377 -> 381.7\nOnce we have that, we can extract it\nfrom the children on the Wrapper\n381.7 -> 384.5\nand pass it to another React component\n384.5 -> 390.3\nthis time is the TalkLayout component,\nthat will solve all the synching for us\n390.3 -> 398.4\nNow you should see the steps changing\nevery time I snap my fingers\n398.4 -> 403\nSome of you may have noticed that this\nlooks similar to the layout of this talk\n403 -> 404.7\nthe talk I'm giving right now\n404.7 -> 406.9\nand it is\n```\n\n---\n\n<Video src=\"speaker.webm\" start={406.9} end={420} />\n<Browser url=\"/\" zoom={0.4} />\n<Editor\n  code=\"cake.mdx\"\n  focus=\"508:527\"\n  lang=\"md\"\n  tab=\"demo/cake.mdx\"\n  tabs={[\"demo/cake.mdx\", \"pages/index.js\"]}\n/>\n\n```srt\n406.9 -> 409.5\nThis talk was built using this same technique\n409.5 -> 413.7\nIt's all MDX\nAlways has been\n413.7 -> 420\nOn the left you can see the mdx for\nthis specific step of the talk\n```\n\n---\n\n<Video src=\"speaker.webm\" start={420} end={439.6} />\n<Browser url=\"/\" zoom={0.4} />\n<Editor\n  code=\"cake.mdx\"\n  focus=\"531:551\"\n  lang=\"md\"\n  tab=\"demo/cake.mdx\"\n  tabs={[\"demo/cake.mdx\", \"pages/index.js\"]}\n/>\n\n```srt\n420 -> 426\nAnd here is the next one\nWe have four different elements for each step\n426 -> 432.5\nWe have the video filename and timestamps\nthe url we are showing on the iframe\n432.5 -> 439.6\ninformation for the code we are highlighting\nand even the captions for the step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={439.6} end={484.1} />\n<Browser\n  url=\"https://codehike.org\"\n  zoom={0.4}\n  prependOrigin={false}\n/>\n<Editor\n  code=\"package.json.copy\"\n  focus=\"2:16\"\n  lang=\"json\"\n  tab=\"package.json\"\n  tabs={[\"package.json\"]}\n/>\n\n```srt\n439.6 -> 444.8\nAnd, that's all, that's my talk\nSo, what's the takeaway?\n444.8 -> 448.5\nWell, don't be afraid to use MDX\nfor something different\n448.5 -> 456\nYou can use it to make your own dialect\nfor almost any kind of content or layout\n456 -> 459.7\nI leave you here the links\nto the repo of the talk\n459.7 -> 462.1\nnot the slides\nbut the talk itself\n462.1 -> 467\nyou run yarn dev\nand you can watch this talk again\n467 -> 471.5\nAlso, there's my twitter,\nand the components we used\n471.5 -> 474.4\nMost of them come\nfrom a new project I'm working on\n474.4 -> 479.2\nCode Hike, it's a set of tools\nto make code walkthroughs\n479.2 -> 483\nor explaining code in general\n483 -> 484.1\nThank you! :)\n```\n",
      "file": "demo/cake.mdx",
      "focus": "508:527",
      "lang": "md",
      "tabs": ["demo/cake.mdx", "pages/index.js"],
      "mdxType": "Editor"
    },
    {
      "code": "<Video src=\"speaker.webm\" start={1} end={25} />\n<Browser url=\"/hello\" loadUrl=\"/01\" zoom={0.8} />\n<Editor\n  code=\"hello.md\"\n  lang=\"md\"\n  tab=\"demo/hello.md\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n0 –> 4\nHere we have a Markdown file\n4 –> 10\nMarkdown has this clean syntax that\nmakes you want to use it for everything\n10 –> 15.6\nAnd that's also why we have MDX,\nnow we can put more things on Markdown\n15.6 –> 19.7\nIn this talk,\nwe are going to see how flexible MDX is\n19.7 –> 25\nAnd how to use it for any kind of content\nand any kind of layout\n```\n\n---\n\n<Video src=\"speaker.webm\" start={25} end={39} />\n<Browser url=\"/hello\" loadUrl=\"/01\" zoom={0.8} />\n<Editor\n  code=\"01.js\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n25 –> 29.5\nBut first I need to show you how this works\n29.5 –> 34.8\nWe have a small Next.js App\nthat has the MDX plugin\n34.8 –> 39\nand we have a page that imports\nthe markdown file\n```\n\n---\n\n<Video src=\"speaker.webm\" start={39} end={53} />\n<Browser url=\"/hello\" loadUrl=\"/01\" zoom={0.8} />\n<Editor\n  code=\"01.js\"\n  focus=\"2,5[9:22]\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n39 -> 43.7\nThe real magic happens on this import\n43.7 -> 49.5\nHere the MDX loader transforms the markdown\ninto a React component\n49.5 -> 53\nAnd the page just renders that component\n```\n\n---\n\n<Video src=\"speaker.webm\" start={53} end={71} />\n<Browser url=\"/hello\" loadUrl=\"/02\" zoom={0.8} />\n<Editor\n  code=\"02.js\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n53 -> 59\nIf we want to change what's rendered,\nwe can use the MDXProvider\n59 -> 64.3\nIt has a prop that let us override\nany of the default components\n64.3 -> 71\nFor example, here we are adding\na purple border to all H1s\n```\n\n---\n\n<Video src=\"speaker.webm\" start={71} end={95.5} />\n<Browser url=\"/hello\" loadUrl=\"/03\" zoom={0.8} />\n<Editor\n  code=\"03.js\"\n  focus=\"13:23\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n71 -> 75.1\nA special component we can override\nis the Wrapper\n75.1 -> 79.5\nThe wrapper is the component\nthat wraps the content\n79.5 -> 85.6\nYou can see how we're using it to add\na border around the whole content\n85.6 -> 90\nBut the cool thing about this component\nis that in the children prop\n90 -> 95.5\nwe get all the content from\nthe markdown file as React elements\n```\n\n---\n\n<Video src=\"speaker.webm\" start={95.5} end={128.2} />\n<Browser url=\"/hello\" loadUrl=\"/04\" zoom={0.8} />\n<Editor\n  code=\"04.js\"\n  focus=\"14:20\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n95.5 -> 100.5\nand React elements\nare just javascript objects\n100.5 -> 103.9\nHere we are rendering\nthe wrapper children as JSON\n103.9 -> 106.8\nWe are only showing some of the properties\n106.8 -> 110.8\nI hope you can see\nwhat the JSON looks like\n110.8 -> 112.3\nIt's an array\n112.3 -> 117.9\nthe first element is an h1,\nthe second a paragraph\n117.9 -> 122\nEach element comes with an mdxType\n122 -> 128.2\nWe can, and we will, use that mdxType to\nextract information about the content\n```\n\n---\n\n<Video src=\"speaker.webm\" start={128.2} end={169.7} />\n<Browser url=\"/hello\" loadUrl=\"/05\" zoom={0.9} />\n<Editor\n  code=\"05.js\"\n  focus=\"17:35\"\n  lang=\"jsx\"\n  tab=\"pages/hello.js\"\n  tabs={[\"demo/hello.md\", \"pages/hello.js\"]}\n/>\n\n```srt\n128.2 -> 129.3\nFor example\n129.3 -> 133.3\nwe could get a list of all the H1s\nfrom the children,\n133.3 -> 138.4\nand render it as a table of contents\nThis is a very simple example,\n138.4 -> 144.2\nbut it shows the pattern we are going\nto use on the rest of the examples\n144.2 -> 147.1\nIn all of them, we'll have two steps\n147.1 -> 151\nFirst, we extract some data\nfrom the children\n151 -> 156.4\nand then we pass that data\nto some layout component\n156.4 -> 160.4\nKeep in mind that this runs on every render\n160.4 -> 163\nIn most cases,\nit isn't a performance problem\n163 -> 169.7\nbut if it is, you can move it to a plugin,\nand run the transformation on build-time\n```\n\n---\n\n<Video src=\"speaker.webm\" start={169.7} end={214} />\n<Browser url=\"/steps\" loadUrl=\"/06\" zoom={0.9} />\n<Editor\n  code=\"steps.mdx\"\n  focus=\"1:20\"\n  lang=\"md\"\n  tab=\"demo/steps.mdx\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n169.7 -> 177.4\nI usually write content that has steps\nlike tutorials or any type of walkthrough\n177.4 -> 182.4\nMarkdown doesn't have any specific syntax\nfor grouping things in steps\n182.4 -> 188.6\nBut we can use MDX to extend Markdown\nand make up our syntax\n188.6 -> 192.9\nThe implementation of the Step component\nwe are using here doesn't matter\n192.9 -> 196\nwe are just using it for grouping elements\n196 -> 201.3\nIf you are new to MDX,\nthis may not be the best introduction\n201.3 -> 206.7\nMDX is typically used for embedding\ninteractive components in Markdown\n206.7 -> 209.1\nBut here we are taking a different approach\n209.1 -> 214\nand using it more\nas a syntax extension for markdown\n```\n\n---\n\n<Video src=\"speaker.webm\" start={214} end={257.8} />\n<Browser url=\"/steps\" loadUrl=\"/07\" zoom={0.9}>\n  <Action\n    on={230}\n    type=\"click\"\n    selector=\"button\"\n    offset={40}\n  />\n  <Action\n    on={232}\n    type=\"click\"\n    selector=\"button\"\n    offset={40}\n  />\n  <Action\n    on={234}\n    type=\"click\"\n    selector=\"button\"\n    offset={40}\n  />\n</Browser>\n<Editor\n  code=\"07.js\"\n  focus=\"17:28\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n214 -> 219.5\nNow, based on the MDX file that has steps,\nwe can write another Wrapper component\n219.5 -> 224.2\nIn this case, the children prop will be\nan array of Step elements\n224.2 -> 229\nSo we can keep track of\nwhat step we are showing using React state\n229 -> 235\nand let the user change the current step\nby clicking a button\n235 -> 241.5\nOk, now I want to show the same content\nbut with a different layout\n241.5 -> 248.5\nThere's a technique called scrollytelling,\nyou may have seen it on some websites\n248.5 -> 253.5\nas the user scrolls down there's some\npart of the layout that sticks to the screen\n253.5 -> 256.4\nwhile the rest is scrolled away\n256.4 -> 257.8\nLet's do that\n```\n\n---\n\n<Video src=\"speaker.webm\" start={257.8} end={292.5} />\n<Browser url=\"/steps\" loadUrl=\"/08\" zoom={0.6}>\n  <Action on={278} type=\"scroll\" selector=\"#step-1\" />\n  <Action on={282} type=\"scroll\" selector=\"#step-2\" />\n  <Action on={284} type=\"scroll\" selector=\"#step-3\" />\n  <Action on={286} type=\"scroll\" selector=\"#step-0\" />\n</Browser>\n<Editor\n  code=\"08.js\"\n  focus=\"18:32\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n257.8 -> 262.5\nSince this is a lightning talk\nI won't show the code of the Layout component\n262.5 -> 267.5\nI'll share the link to the repo later\nif you want to see how it works\n267.5 -> 272\nThe ScrollytellingLayout component\ntakes two props\n272 -> 278.7\none for the left-side that can be scrolled,\nand another for the sticky part on the right\n278.7 -> 281\nWhen the user scrolls to a new step\n281 -> 284.6\nwe show the corresponding element\nfrom the sticker list\n284.6 -> 286.7\nwhich, for now, it's just the step number\n286.7 -> 292.5\nBut let's change it so it shows something\nfrom the MDX file\n```\n\n---\n\n<Video src=\"speaker.webm\" start={292.5} end={309} />\n<Browser url=\"/steps\" loadUrl=\"/09\" zoom={0.6} />\n<Editor\n  code=\"steps.2.mdx\"\n  focus=\"3:9,17:23,30\"\n  focus=\"19:23,30:37,44\"\n  lang=\"md\"\n  tab=\"demo/steps.mdx\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n292.5 -> 297\nSuppose we want to show some code\nin the sticky part of the layout\n297 -> 302.5\nSince there isn't any specific syntax\nfor this, we'll make up our own\n302.5 -> 309\nFor example, we put the sticky part\nas the first element in the Step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={309} end={320} />\n<Browser url=\"/steps\" loadUrl=\"/10\" zoom={0.6}></Browser>\n<Editor\n  code=\"10.js\"\n  focus=\"18:32\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n309 -> 311.5\nNow, doing some array transformations\n311.5 -> 315.7\nWe extract the list of steps\nand the list of stickers\n315.7 -> 320\nand then pass them\nto the same Layout component\n```\n\n---\n\n<Video src=\"speaker.webm\" start={323} end={335} />\n<Browser url=\"/steps\" loadUrl=\"/10\" zoom={0.6}>\n  <Action on={326} type=\"scroll\" selector=\"#step-1\" />\n  <Action on={328.5} type=\"scroll\" selector=\"#step-2\" />\n  <Action on={331} type=\"scroll\" selector=\"#step-3\" />\n  <Action on={333.5} type=\"scroll\" selector=\"#step-0\" />\n</Browser>\n<Editor\n  code=\"10.js\"\n  focus=\"18:32\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n323 -> 325\nSo now the code on the right\n325 -> 335\nshould change as the user scrolls\nto a different step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={335} end={367} />\n<Browser url=\"/steps\" loadUrl=\"/11\" zoom={0.6}>\n  <Action on={345} type=\"scroll\" selector=\"#step-1\" />\n  <Action on={347} type=\"scroll\" selector=\"#step-2\" />\n  <Action on={349} type=\"scroll\" selector=\"#step-3\" />\n  <Action on={351} type=\"scroll\" selector=\"#step-0\" />\n</Browser>\n<Editor\n  code=\"11.js\"\n  focus=\"19,26:38\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n335 -> 342\nJust for fun, I have a Terminal component\nthat animates code transitions\n342 -> 347\nso we can use it for the stickers\nand let it handle the step changes\n350.8 -> 355\nFor the next example, let's add some media\n355 -> 358.4\nInstead of changing the steps\nusing the scroll\n358.4 -> 363.2\nwe can synchronize the steps with something\nlike a video or an audio,\n363.2 -> 367\nand change the steps as the media progress\n```\n\n---\n\n<Video src=\"speaker.webm\" start={367} end={377} />\n<Browser url=\"/steps\" loadUrl=\"/11\" zoom={0.6} />\n<Editor\n  code=\"steps.3.mdx\"\n  focus=\"3,17,19,30\"\n  lang=\"md\"\n  tab=\"demo/steps.mdx\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n367 -> 370.5\nTo do that,\nwe'll change the MDX\n370.5 -> 377\nwe need to specify the media file\nand the time range for each step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={377} end={406.9} />\n<Browser url=\"/steps\" loadUrl=\"/13\" zoom={0.6} />\n<Editor\n  code=\"13.js\"\n  focus=\"18,28:40\"\n  lang=\"jsx\"\n  tab=\"pages/steps.js\"\n  tabs={[\"demo/steps.mdx\", \"pages/steps.js\"]}\n/>\n\n```srt\n377 -> 381.7\nOnce we have that, we can extract it\nfrom the children on the Wrapper\n381.7 -> 384.5\nand pass it to another React component\n384.5 -> 390.3\nthis time is the TalkLayout component,\nthat will solve all the synching for us\n390.3 -> 398.4\nNow you should see the steps changing\nevery time I snap my fingers\n398.4 -> 403\nSome of you may have noticed that this\nlooks similar to the layout of this talk\n403 -> 404.7\nthe talk I'm giving right now\n404.7 -> 406.9\nand it is\n```\n\n---\n\n<Video src=\"speaker.webm\" start={406.9} end={420} />\n<Browser url=\"/\" zoom={0.4} />\n<Editor\n  code=\"cake.mdx\"\n  focus=\"508:527\"\n  lang=\"md\"\n  tab=\"demo/cake.mdx\"\n  tabs={[\"demo/cake.mdx\", \"pages/index.js\"]}\n/>\n\n```srt\n406.9 -> 409.5\nThis talk was built using this same technique\n409.5 -> 413.7\nIt's all MDX\nAlways has been\n413.7 -> 420\nOn the left you can see the mdx for\nthis specific step of the talk\n```\n\n---\n\n<Video src=\"speaker.webm\" start={420} end={439.6} />\n<Browser url=\"/\" zoom={0.4} />\n<Editor\n  code=\"cake.mdx\"\n  focus=\"531:551\"\n  lang=\"md\"\n  tab=\"demo/cake.mdx\"\n  tabs={[\"demo/cake.mdx\", \"pages/index.js\"]}\n/>\n\n```srt\n420 -> 426\nAnd here is the next one\nWe have four different elements for each step\n426 -> 432.5\nWe have the video filename and timestamps\nthe url we are showing on the iframe\n432.5 -> 439.6\ninformation for the code we are highlighting\nand even the captions for the step\n```\n\n---\n\n<Video src=\"speaker.webm\" start={439.6} end={484.1} />\n<Browser\n  url=\"https://codehike.org\"\n  zoom={0.4}\n  prependOrigin={false}\n/>\n<Editor\n  code=\"package.json.copy\"\n  focus=\"2:16\"\n  lang=\"json\"\n  tab=\"package.json\"\n  tabs={[\"package.json\"]}\n/>\n\n```srt\n439.6 -> 444.8\nAnd, that's all, that's my talk\nSo, what's the takeaway?\n444.8 -> 448.5\nWell, don't be afraid to use MDX\nfor something different\n448.5 -> 456\nYou can use it to make your own dialect\nfor almost any kind of content or layout\n456 -> 459.7\nI leave you here the links\nto the repo of the talk\n459.7 -> 462.1\nnot the slides\nbut the talk itself\n462.1 -> 467\nyou run yarn dev\nand you can watch this talk again\n467 -> 471.5\nAlso, there's my twitter,\nand the components we used\n471.5 -> 474.4\nMost of them come\nfrom a new project I'm working on\n474.4 -> 479.2\nCode Hike, it's a set of tools\nto make code walkthroughs\n479.2 -> 483\nor explaining code in general\n483 -> 484.1\nThank you! :)\n```\n",
      "file": "demo/cake.mdx",
      "focus": "531:551",
      "lang": "md",
      "tabs": ["demo/cake.mdx", "pages/index.js"],
      "mdxType": "Editor"
    },
    {
      "code": "{\n  \"name\": \"The X in MDX\",\n  \"version\": \"2020.10.27\",\n  \"author\": {\n    \"name\": \"Rodrigo Pombo\",\n    \"url\": \"https://twitter.com/pomber\"\n  },\n  \"homepage\": \"https://nextjsconf2020.pomb.us\",\n  \"repository\": \"https://github.com/pomber/the-x-in-mdx\",\n  \"dependencies\": {\n    \"@code-hike/mini-browser\": \"0.2.1\",\n    \"@code-hike/mini-editor\": \"0.2.1\",\n    \"@code-hike/mini-terminal\": \"0.2.1\",\n    \"@code-hike/player\": \"0.2.1\",\n    \"@code-hike/scroller\": \"0.2.1\",\n    \"@code-hike/sim-user\": \"0.2.1\",\n    \"@mdx-js/loader\": \"^1.6.11\",\n    \"@next/mdx\": \"^9.4.4\",\n    \"next\": \"^9.4.4\",\n    \"react\": \"^16.13.1\",\n    \"react-dom\": \"^16.13.1\",\n    \"react-range\": \"^1.6.7\",\n    \"use-spring\": \"^0.2.3\"\n  },\n  \"scripts\": {\n    \"dev\": \"next\"\n  }\n}\n",
      "file": "package.json",
      "focus": "2:16",
      "lang": "json",
      "tabs": ["package.json"],
      "mdxType": "Editor"
    }
  ],
  "captionSteps": [
    [
      {
        "start": 2,
        "end": 4,
        "text": "Here we have a Markdown file"
      },
      {
        "start": 4,
        "end": 10,
        "text": "Markdown has this clean syntax that\nmakes you want to use it for everything"
      },
      {
        "start": 10,
        "end": 15.6,
        "text": "And that's also why we have MDX,\nnow we can put more things on Markdown"
      },
      {
        "start": 15.6,
        "end": 19.7,
        "text": "In this talk,\nwe are going to see how flexible MDX is"
      },
      {
        "start": 19.7,
        "end": 25,
        "text": "And how to use it for any kind of content\nand any kind of layout"
      }
    ],
    [
      {
        "start": 25,
        "end": 29.5,
        "text": "But first I need to show you how this works"
      },
      {
        "start": 29.5,
        "end": 34.8,
        "text": "We have a small Next.js App\nthat has the MDX plugin"
      },
      {
        "start": 34.8,
        "end": 39,
        "text": "and we have a page that imports\nthe markdown file"
      }
    ],
    [
      {
        "start": 39,
        "end": 43.7,
        "text": "The real magic happens on this import"
      },
      {
        "start": 43.7,
        "end": 49.5,
        "text": "Here the MDX loader transforms the markdown\ninto a React component"
      },
      {
        "start": 49.5,
        "end": 53,
        "text": "And the page just renders that component"
      }
    ],
    [
      {
        "start": 53,
        "end": 59,
        "text": "If we want to change what's rendered,\nwe can use the MDXProvider"
      },
      {
        "start": 59,
        "end": 64.3,
        "text": "It has a prop that let us override\nany of the default components"
      },
      {
        "start": 64.3,
        "end": 71,
        "text": "For example, here we are adding\na purple border to all H1s"
      }
    ],
    [
      {
        "start": 71,
        "end": 75.1,
        "text": "A special component we can override\nis the Wrapper"
      },
      {
        "start": 75.1,
        "end": 79.5,
        "text": "The wrapper is the component\nthat wraps the content"
      },
      {
        "start": 79.5,
        "end": 85.6,
        "text": "You can see how we're using it to add\na border around the whole content"
      },
      {
        "start": 85.6,
        "end": 90,
        "text": "But the cool thing about this component\nis that in the children prop"
      },
      {
        "start": 90,
        "end": 95.5,
        "text": "we get all the content from\nthe markdown file as React elements"
      }
    ],
    [
      {
        "start": 95.5,
        "end": 100.5,
        "text": "and React elements\nare just javascript objects"
      },
      {
        "start": 100.5,
        "end": 103.9,
        "text": "Here we are rendering\nthe wrapper children as JSON"
      },
      {
        "start": 103.9,
        "end": 106.8,
        "text": "We are only showing some of the properties"
      },
      {
        "start": 106.8,
        "end": 110.8,
        "text": "I hope you can see\nwhat the JSON looks like"
      },
      {
        "start": 110.8,
        "end": 112.3,
        "text": "It's an array"
      },
      {
        "start": 112.3,
        "end": 117.9,
        "text": "the first element is an h1,\nthe second a paragraph"
      },
      {
        "start": 117.9,
        "end": 122,
        "text": "Each element comes with an mdxType"
      },
      {
        "start": 122,
        "end": 128.2,
        "text": "We can, and we will, use that mdxType to\nextract information about the content"
      }
    ],
    [
      {
        "start": 128.2,
        "end": 129.3,
        "text": "For example"
      },
      {
        "start": 129.3,
        "end": 133.3,
        "text": "we could get a list of all the H1s\nfrom the children,"
      },
      {
        "start": 133.3,
        "end": 138.4,
        "text": "and render it as a table of contents\nThis is a very simple example,"
      },
      {
        "start": 138.4,
        "end": 144.2,
        "text": "but it shows the pattern we are going\nto use on the rest of the examples"
      },
      {
        "start": 144.2,
        "end": 147.1,
        "text": "In all of them, we'll have two steps"
      },
      {
        "start": 147.1,
        "end": 151,
        "text": "First, we extract some data\nfrom the children"
      },
      {
        "start": 151,
        "end": 156.4,
        "text": "and then we pass that data\nto some layout component"
      },
      {
        "start": 156.4,
        "end": 160.4,
        "text": "Keep in mind that this runs on every render"
      },
      {
        "start": 160.4,
        "end": 163,
        "text": "In most cases,\nit isn't a performance problem"
      },
      {
        "start": 163,
        "end": 169.7,
        "text": "but if it is, you can move it to a plugin,\nand run the transformation on build-time"
      }
    ],
    [
      {
        "start": 169.7,
        "end": 177.4,
        "text": "I usually write content that has steps\nlike tutorials or any type of walkthrough"
      },
      {
        "start": 177.4,
        "end": 182.4,
        "text": "Markdown doesn't have any specific syntax\nfor grouping things in steps"
      },
      {
        "start": 182.4,
        "end": 188.6,
        "text": "But we can use MDX to extend Markdown\nand make up our syntax"
      },
      {
        "start": 188.6,
        "end": 192.9,
        "text": "The implementation of the Step component\nwe are using here doesn't matter"
      },
      {
        "start": 192.9,
        "end": 196,
        "text": "we are just using it for grouping elements"
      },
      {
        "start": 196,
        "end": 201.3,
        "text": "If you are new to MDX,\nthis may not be the best introduction"
      },
      {
        "start": 201.3,
        "end": 206.7,
        "text": "MDX is typically used for embedding\ninteractive components in Markdown"
      },
      {
        "start": 206.7,
        "end": 209.1,
        "text": "But here we are taking a different approach"
      },
      {
        "start": 209.1,
        "end": 214,
        "text": "and using it more\nas a syntax extension for markdown"
      }
    ],
    [
      {
        "start": 214,
        "end": 219.5,
        "text": "Now, based on the MDX file that has steps,\nwe can write another Wrapper component"
      },
      {
        "start": 219.5,
        "end": 224.2,
        "text": "In this case, the children prop will be\nan array of Step elements"
      },
      {
        "start": 224.2,
        "end": 229,
        "text": "So we can keep track of\nwhat step we are showing using React state"
      },
      {
        "start": 229,
        "end": 235,
        "text": "and let the user change the current step\nby clicking a button"
      },
      {
        "start": 235,
        "end": 241.5,
        "text": "Ok, now I want to show the same content\nbut with a different layout"
      },
      {
        "start": 241.5,
        "end": 248.5,
        "text": "There's a technique called scrollytelling,\nyou may have seen it on some websites"
      },
      {
        "start": 248.5,
        "end": 253.5,
        "text": "as the user scrolls down there's some\npart of the layout that sticks to the screen"
      },
      {
        "start": 253.5,
        "end": 256.4,
        "text": "while the rest is scrolled away"
      },
      {
        "start": 256.4,
        "end": 257.8,
        "text": "Let's do that"
      }
    ],
    [
      {
        "start": 257.8,
        "end": 262.5,
        "text": "Since this is a lightning talk\nI won't show the code of the Layout component"
      },
      {
        "start": 262.5,
        "end": 267.5,
        "text": "I'll share the link to the repo later\nif you want to see how it works"
      },
      {
        "start": 267.5,
        "end": 272,
        "text": "The ScrollytellingLayout component\ntakes two props"
      },
      {
        "start": 272,
        "end": 278.7,
        "text": "one for the left-side that can be scrolled,\nand another for the sticky part on the right"
      },
      {
        "start": 278.7,
        "end": 281,
        "text": "When the user scrolls to a new step"
      },
      {
        "start": 281,
        "end": 284.6,
        "text": "we show the corresponding element\nfrom the sticker list"
      },
      {
        "start": 284.6,
        "end": 286.7,
        "text": "which, for now, it's just the step number"
      },
      {
        "start": 286.7,
        "end": 292.5,
        "text": "But let's change it so it shows something\nfrom the MDX file"
      }
    ],
    [
      {
        "start": 292.5,
        "end": 297,
        "text": "Suppose we want to show some code\nin the sticky part of the layout"
      },
      {
        "start": 297,
        "end": 302.5,
        "text": "Since there isn't any specific syntax\nfor this, we'll make up our own"
      },
      {
        "start": 302.5,
        "end": 309,
        "text": "For example, we put the sticky part\nas the first element in the Step"
      }
    ],
    [
      {
        "start": 309,
        "end": 311.5,
        "text": "Now, doing some array transformations"
      },
      {
        "start": 311.5,
        "end": 315.7,
        "text": "We extract the list of steps\nand the list of stickers"
      },
      {
        "start": 315.7,
        "end": 320,
        "text": "and then pass them\nto the same Layout component"
      }
    ],
    [
      {
        "start": 323,
        "end": 325,
        "text": "So now the code on the right"
      },
      {
        "start": 325,
        "end": 335,
        "text": "should change as the user scrolls\nto a different step"
      }
    ],
    [
      {
        "start": 335,
        "end": 342,
        "text": "Just for fun, I have a Terminal component\nthat animates code transitions"
      },
      {
        "start": 342,
        "end": 347,
        "text": "so we can use it for the stickers\nand let it handle the step changes"
      },
      {
        "start": 350.8,
        "end": 355,
        "text": "For the next example, let's add some media"
      },
      {
        "start": 355,
        "end": 358.4,
        "text": "Instead of changing the steps\nusing the scroll"
      },
      {
        "start": 358.4,
        "end": 363.2,
        "text": "we can synchronize the steps with something\nlike a video or an audio,"
      },
      {
        "start": 363.2,
        "end": 367,
        "text": "and change the steps as the media progress"
      }
    ],
    [
      {
        "start": 367,
        "end": 370.5,
        "text": "To do that,\nwe'll change the MDX"
      },
      {
        "start": 370.5,
        "end": 377,
        "text": "we need to specify the media file\nand the time range for each step"
      }
    ],
    [
      {
        "start": 377,
        "end": 381.7,
        "text": "Once we have that, we can extract it\nfrom the children on the Wrapper"
      },
      {
        "start": 381.7,
        "end": 384.5,
        "text": "and pass it to another React component"
      },
      {
        "start": 384.5,
        "end": 390.3,
        "text": "this time is the TalkLayout component,\nthat will solve all the synching for us"
      },
      {
        "start": 390.3,
        "end": 398.4,
        "text": "Now you should see the steps changing\nevery time I snap my fingers"
      },
      {
        "start": 398.4,
        "end": 403,
        "text": "Some of you may have noticed that this\nlooks similar to the layout of this talk"
      },
      {
        "start": 403,
        "end": 404.7,
        "text": "the talk I'm giving right now"
      },
      {
        "start": 404.7,
        "end": 406.9,
        "text": "and it is"
      }
    ],
    [
      {
        "start": 406.9,
        "end": 409.5,
        "text": "This talk was built using this same technique"
      },
      {
        "start": 409.5,
        "end": 413.7,
        "text": "It's all MDX\nAlways has been"
      },
      {
        "start": 413.7,
        "end": 420,
        "text": "On the left you can see the mdx for\nthis specific step of the talk"
      }
    ],
    [
      {
        "start": 420,
        "end": 426,
        "text": "And here is the next one\nWe have four different elements for each step"
      },
      {
        "start": 426,
        "end": 432.5,
        "text": "We have the video filename and timestamps\nthe url we are showing on the iframe"
      },
      {
        "start": 432.5,
        "end": 439.6,
        "text": "information for the code we are highlighting\nand even the captions for the step"
      }
    ],
    [
      {
        "start": 439.6,
        "end": 444.8,
        "text": "And, that's all, that's my talk\nSo, what's the takeaway?"
      },
      {
        "start": 444.8,
        "end": 448.5,
        "text": "Well, don't be afraid to use MDX\nfor something different"
      },
      {
        "start": 448.5,
        "end": 456,
        "text": "You can use it to make your own dialect\nfor almost any kind of content or layout"
      },
      {
        "start": 456,
        "end": 459.7,
        "text": "I leave you here the links\nto the repo of the talk"
      },
      {
        "start": 459.7,
        "end": 462.1,
        "text": "not the slides\nbut the talk itself"
      },
      {
        "start": 462.1,
        "end": 467,
        "text": "you run yarn dev\nand you can watch this talk again"
      },
      {
        "start": 467,
        "end": 471.5,
        "text": "Also, there's my twitter,\nand the components we used"
      },
      {
        "start": 471.5,
        "end": 474.4,
        "text": "Most of them come\nfrom a new project I'm working on"
      },
      {
        "start": 474.4,
        "end": 479.2,
        "text": "Code Hike, it's a set of tools\nto make code walkthroughs"
      },
      {
        "start": 479.2,
        "end": 483,
        "text": "or explaining code in general"
      },
      {
        "start": 483,
        "end": 484.1,
        "text": "Thank you! :)"
      }
    ]
  ]
}
